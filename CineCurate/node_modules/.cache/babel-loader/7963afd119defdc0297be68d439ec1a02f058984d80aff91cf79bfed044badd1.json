{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport MovieCard from './MovieCard';\nimport './App.css';\nimport SearchIcon from './search.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.themoviedb.org/3/search/movie?api_key=01f9af4886c7fb97667aea5735ad3fd4';\nconst movie1 = {\n  \"Title\": \"Spider-Man\",\n  \"Year\": \"2002\",\n  \"imdbID\": 557,\n  \"Type\": \"movie\",\n  \"Poster\": \"https://image.tmdb.org/t/p/w500/gh4cZbhZxyTbgxQPxD0dOudNPTn.jpg\"\n};\nconst App = () => {\n  _s();\n  const searchMovies = async title => {\n    const response = await fetch(`${API_URL}&query=${title}`);\n    const data = await response.json();\n    const formattedMovies = data.results.map(movie => ({\n      Title: movie.title,\n      Year: movie.release_date ? movie.release_date.split('-')[0] : 'N/A',\n      // Extract the year from release date\n      imdbID: movie.id,\n      // Assuming movie.id is used as the identifier similar to imdbID\n      Type: movie.media_type || 'movie',\n      // If there's no 'type' field, default to 'movie'\n      Poster: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : 'N/A' // Full URL for the poster\n    }));\n    console.log(formattedMovies);\n  };\n  useEffect(() => {\n    searchMovies('Spiderman');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"MovieLand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for movies\",\n          value: \"SpiderMan\",\n          onChange: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: SearchIcon,\n          alt: \"search\",\n          onClick: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie1: movie1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","MovieCard","SearchIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","movie1","App","_s","searchMovies","title","response","fetch","data","json","formattedMovies","results","map","movie","Title","Year","release_date","split","imdbID","id","Type","media_type","Poster","poster_path","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","src","alt","onClick","_c","$RefreshReg$"],"sources":["D:/reactapp/src/App.js"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport MovieCard from './MovieCard';\r\n\r\nimport './App.css';\r\nimport SearchIcon from './search.svg';\r\n\r\nconst API_URL = 'https://api.themoviedb.org/3/search/movie?api_key=01f9af4886c7fb97667aea5735ad3fd4'\r\n\r\nconst movie1 = {\r\n    \"Title\": \"Spider-Man\",\r\n    \"Year\": \"2002\",\r\n    \"imdbID\": 557,\r\n    \"Type\": \"movie\",\r\n    \"Poster\": \"https://image.tmdb.org/t/p/w500/gh4cZbhZxyTbgxQPxD0dOudNPTn.jpg\"\r\n}\r\n\r\nconst App = () => {\r\n\r\n    const searchMovies = async (title) => {\r\n        const response = await fetch(`${API_URL}&query=${title}`);\r\n        const data = await response.json();\r\n\r\n        const formattedMovies = data.results.map(movie => ({\r\n            Title: movie.title,\r\n            Year: movie.release_date ? movie.release_date.split('-')[0] : 'N/A', // Extract the year from release date\r\n            imdbID: movie.id, // Assuming movie.id is used as the identifier similar to imdbID\r\n            Type: movie.media_type || 'movie', // If there's no 'type' field, default to 'movie'\r\n            Poster: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : 'N/A' // Full URL for the poster\r\n}));\r\n    \r\n        console.log(formattedMovies);\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchMovies('Spiderman');\r\n    }, []);\r\n    return(\r\n        <>\r\n       <div className=\"app\">\r\n        <h1>MovieLand</h1>\r\n        <div className=\"search\">\r\n            <input\r\n            placeholder=\"Search for movies\"\r\n            value = \"SpiderMan\"\r\n            onChange={() => {}}\r\n            />\r\n            <img\r\n            src={SearchIcon}\r\n            alt=\"search\"\r\n            onClick={() => {}}\r\n            />\r\n        </div>\r\n       </div>\r\n\r\n       <div className=\"container\">\r\n        <MovieCard movie1={movie1} />\r\n\r\n       </div>\r\n       </>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}